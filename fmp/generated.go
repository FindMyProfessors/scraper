// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package fmp

import (
	"context"

	"github.com/FindMyProfessors/scraper/model"
	"github.com/Khan/genqlient/graphql"
)

// CreateProfessorResponse is returned by CreateProfessor on success.
type CreateProfessorResponse struct {
	CreateProfessor *model.Professor `json:"createProfessor"`
}

// GetCreateProfessor returns CreateProfessorResponse.CreateProfessor, and is useful for accessing the field via an interface.
func (v *CreateProfessorResponse) GetCreateProfessor() *model.Professor { return v.CreateProfessor }

// CreateReviewCreateReview includes the requested fields of the GraphQL type Review.
type CreateReviewCreateReview struct {
	Id string `json:"id"`
}

// GetId returns CreateReviewCreateReview.Id, and is useful for accessing the field via an interface.
func (v *CreateReviewCreateReview) GetId() string { return v.Id }

// CreateReviewResponse is returned by CreateReview on success.
type CreateReviewResponse struct {
	CreateReview *CreateReviewCreateReview `json:"createReview"`
}

// GetCreateReview returns CreateReviewResponse.CreateReview, and is useful for accessing the field via an interface.
func (v *CreateReviewResponse) GetCreateReview() *CreateReviewCreateReview { return v.CreateReview }

// CreateSchoolResponse is returned by CreateSchool on success.
type CreateSchoolResponse struct {
	CreateSchool model.School `json:"createSchool"`
}

// GetCreateSchool returns CreateSchoolResponse.CreateSchool, and is useful for accessing the field via an interface.
func (v *CreateSchoolResponse) GetCreateSchool() model.School { return v.CreateSchool }

// GetProfessorByRMPIdResponse is returned by GetProfessorByRMPId on success.
type GetProfessorByRMPIdResponse struct {
	ProfessorByRMPId *model.Professor `json:"professorByRMPId"`
}

// GetProfessorByRMPId returns GetProfessorByRMPIdResponse.ProfessorByRMPId, and is useful for accessing the field via an interface.
func (v *GetProfessorByRMPIdResponse) GetProfessorByRMPId() *model.Professor {
	return v.ProfessorByRMPId
}

// GetProfessorsProfessorsProfessorConnection includes the requested fields of the GraphQL type ProfessorConnection.
type GetProfessorsProfessorsProfessorConnection struct {
	Professors []model.Professor                                  `json:"professors"`
	PageInfo   GetProfessorsProfessorsProfessorConnectionPageInfo `json:"pageInfo"`
	TotalCount int                                                `json:"totalCount"`
}

// GetProfessors returns GetProfessorsProfessorsProfessorConnection.Professors, and is useful for accessing the field via an interface.
func (v *GetProfessorsProfessorsProfessorConnection) GetProfessors() []model.Professor {
	return v.Professors
}

// GetPageInfo returns GetProfessorsProfessorsProfessorConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *GetProfessorsProfessorsProfessorConnection) GetPageInfo() GetProfessorsProfessorsProfessorConnectionPageInfo {
	return v.PageInfo
}

// GetTotalCount returns GetProfessorsProfessorsProfessorConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetProfessorsProfessorsProfessorConnection) GetTotalCount() int { return v.TotalCount }

// GetProfessorsProfessorsProfessorConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type GetProfessorsProfessorsProfessorConnectionPageInfo struct {
	HasNextPage bool   `json:"hasNextPage"`
	EndCursor   string `json:"endCursor"`
}

// GetHasNextPage returns GetProfessorsProfessorsProfessorConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *GetProfessorsProfessorsProfessorConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns GetProfessorsProfessorsProfessorConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *GetProfessorsProfessorsProfessorConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetProfessorsResponse is returned by GetProfessors on success.
type GetProfessorsResponse struct {
	Professors GetProfessorsProfessorsProfessorConnection `json:"professors"`
}

// GetProfessors returns GetProfessorsResponse.Professors, and is useful for accessing the field via an interface.
func (v *GetProfessorsResponse) GetProfessors() GetProfessorsProfessorsProfessorConnection {
	return v.Professors
}

// GetSchoolsResponse is returned by GetSchools on success.
type GetSchoolsResponse struct {
	Schools GetSchoolsSchoolsSchoolConnection `json:"schools"`
}

// GetSchools returns GetSchoolsResponse.Schools, and is useful for accessing the field via an interface.
func (v *GetSchoolsResponse) GetSchools() GetSchoolsSchoolsSchoolConnection { return v.Schools }

// GetSchoolsSchoolsSchoolConnection includes the requested fields of the GraphQL type SchoolConnection.
type GetSchoolsSchoolsSchoolConnection struct {
	Schools    []model.School `json:"schools"`
	TotalCount int            `json:"totalCount"`
}

// GetSchools returns GetSchoolsSchoolsSchoolConnection.Schools, and is useful for accessing the field via an interface.
func (v *GetSchoolsSchoolsSchoolConnection) GetSchools() []model.School { return v.Schools }

// GetTotalCount returns GetSchoolsSchoolsSchoolConnection.TotalCount, and is useful for accessing the field via an interface.
func (v *GetSchoolsSchoolsSchoolConnection) GetTotalCount() int { return v.TotalCount }

type NewProfessor struct {
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	RmpId     *string `json:"rmpId"`
}

// GetFirstName returns NewProfessor.FirstName, and is useful for accessing the field via an interface.
func (v *NewProfessor) GetFirstName() string { return v.FirstName }

// GetLastName returns NewProfessor.LastName, and is useful for accessing the field via an interface.
func (v *NewProfessor) GetLastName() string { return v.LastName }

// GetRmpId returns NewProfessor.RmpId, and is useful for accessing the field via an interface.
func (v *NewProfessor) GetRmpId() *string { return v.RmpId }

type NewReview struct {
	Quality    float64     `json:"quality"`
	Difficulty float64     `json:"difficulty"`
	Time       string      `json:"time"`
	Tags       []model.Tag `json:"tags"`
	Grade      model.Grade `json:"grade"`
}

// GetQuality returns NewReview.Quality, and is useful for accessing the field via an interface.
func (v *NewReview) GetQuality() float64 { return v.Quality }

// GetDifficulty returns NewReview.Difficulty, and is useful for accessing the field via an interface.
func (v *NewReview) GetDifficulty() float64 { return v.Difficulty }

// GetTime returns NewReview.Time, and is useful for accessing the field via an interface.
func (v *NewReview) GetTime() string { return v.Time }

// GetTags returns NewReview.Tags, and is useful for accessing the field via an interface.
func (v *NewReview) GetTags() []model.Tag { return v.Tags }

// GetGrade returns NewReview.Grade, and is useful for accessing the field via an interface.
func (v *NewReview) GetGrade() model.Grade { return v.Grade }

type NewSchool struct {
	Name string `json:"name"`
}

// GetName returns NewSchool.Name, and is useful for accessing the field via an interface.
func (v *NewSchool) GetName() string { return v.Name }

// __CreateProfessorInput is used internally by genqlient
type __CreateProfessorInput struct {
	SchoolId string       `json:"schoolId"`
	Input    NewProfessor `json:"input"`
}

// GetSchoolId returns __CreateProfessorInput.SchoolId, and is useful for accessing the field via an interface.
func (v *__CreateProfessorInput) GetSchoolId() string { return v.SchoolId }

// GetInput returns __CreateProfessorInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateProfessorInput) GetInput() NewProfessor { return v.Input }

// __CreateReviewInput is used internally by genqlient
type __CreateReviewInput struct {
	ProfessorId string    `json:"professorId"`
	Input       NewReview `json:"input"`
}

// GetProfessorId returns __CreateReviewInput.ProfessorId, and is useful for accessing the field via an interface.
func (v *__CreateReviewInput) GetProfessorId() string { return v.ProfessorId }

// GetInput returns __CreateReviewInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateReviewInput) GetInput() NewReview { return v.Input }

// __CreateSchoolInput is used internally by genqlient
type __CreateSchoolInput struct {
	Input NewSchool `json:"input"`
}

// GetInput returns __CreateSchoolInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateSchoolInput) GetInput() NewSchool { return v.Input }

// __GetProfessorByRMPIdInput is used internally by genqlient
type __GetProfessorByRMPIdInput struct {
	RmpId         string `json:"rmpId"`
	IncludeSchool bool   `json:"includeSchool"`
}

// GetRmpId returns __GetProfessorByRMPIdInput.RmpId, and is useful for accessing the field via an interface.
func (v *__GetProfessorByRMPIdInput) GetRmpId() string { return v.RmpId }

// GetIncludeSchool returns __GetProfessorByRMPIdInput.IncludeSchool, and is useful for accessing the field via an interface.
func (v *__GetProfessorByRMPIdInput) GetIncludeSchool() bool { return v.IncludeSchool }

// __GetProfessorsInput is used internally by genqlient
type __GetProfessorsInput struct {
	SchoolId string  `json:"schoolId"`
	After    *string `json:"after"`
}

// GetSchoolId returns __GetProfessorsInput.SchoolId, and is useful for accessing the field via an interface.
func (v *__GetProfessorsInput) GetSchoolId() string { return v.SchoolId }

// GetAfter returns __GetProfessorsInput.After, and is useful for accessing the field via an interface.
func (v *__GetProfessorsInput) GetAfter() *string { return v.After }

func CreateProfessor(
	ctx context.Context,
	client graphql.Client,
	schoolId string,
	input NewProfessor,
) (*CreateProfessorResponse, error) {
	req := &graphql.Request{
		OpName: "CreateProfessor",
		Query: `
mutation CreateProfessor ($schoolId: ID!, $input: NewProfessor!) {
	createProfessor(schoolId: $schoolId, input: $input) {
		id
	}
}
`,
		Variables: &__CreateProfessorInput{
			SchoolId: schoolId,
			Input:    input,
		},
	}
	var err error

	var data CreateProfessorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateReview(
	ctx context.Context,
	client graphql.Client,
	professorId string,
	input NewReview,
) (*CreateReviewResponse, error) {
	req := &graphql.Request{
		OpName: "CreateReview",
		Query: `
mutation CreateReview ($professorId: ID!, $input: NewReview!) {
	createReview(professorId: $professorId, input: $input) {
		id
	}
}
`,
		Variables: &__CreateReviewInput{
			ProfessorId: professorId,
			Input:       input,
		},
	}
	var err error

	var data CreateReviewResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateSchool(
	ctx context.Context,
	client graphql.Client,
	input NewSchool,
) (*CreateSchoolResponse, error) {
	req := &graphql.Request{
		OpName: "CreateSchool",
		Query: `
mutation CreateSchool ($input: NewSchool!) {
	createSchool(input: $input) {
		id
	}
}
`,
		Variables: &__CreateSchoolInput{
			Input: input,
		},
	}
	var err error

	var data CreateSchoolResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetProfessorByRMPId(
	ctx context.Context,
	client graphql.Client,
	rmpId string,
	includeSchool bool,
) (*GetProfessorByRMPIdResponse, error) {
	req := &graphql.Request{
		OpName: "GetProfessorByRMPId",
		Query: `
query GetProfessorByRMPId ($rmpId: String!, $includeSchool: Boolean!) {
	professorByRMPId(rmpId: $rmpId) {
		id
		firstName
		lastName
		linked
		school @include(if: $includeSchool) {
			id
			name
		}
	}
}
`,
		Variables: &__GetProfessorByRMPIdInput{
			RmpId:         rmpId,
			IncludeSchool: includeSchool,
		},
	}
	var err error

	var data GetProfessorByRMPIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetProfessors(
	ctx context.Context,
	client graphql.Client,
	schoolId string,
	after *string,
) (*GetProfessorsResponse, error) {
	req := &graphql.Request{
		OpName: "GetProfessors",
		Query: `
query GetProfessors ($schoolId: ID!, $after: String) {
	professors(schoolId: $schoolId, first: 50, after: $after) {
		professors {
			id
			firstName
			lastName
			reviews(first: 1) {
				reviews {
					id
				}
				pageInfo {
					endCursor
					hasNextPage
				}
			}
		}
		pageInfo {
			hasNextPage
			endCursor
		}
		totalCount
	}
}
`,
		Variables: &__GetProfessorsInput{
			SchoolId: schoolId,
			After:    after,
		},
	}
	var err error

	var data GetProfessorsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetSchools(
	ctx context.Context,
	client graphql.Client,
) (*GetSchoolsResponse, error) {
	req := &graphql.Request{
		OpName: "GetSchools",
		Query: `
query GetSchools {
	schools(first: 50) {
		schools {
			id
			name
		}
		totalCount
	}
}
`,
	}
	var err error

	var data GetSchoolsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
